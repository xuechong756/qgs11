[[{"__type__":"cc.Prefab","data":{"__id__":1}},{"__type__":"cc.Node","_name":"ParLvUp","_children":[{"__id__":2},{"__id__":6}],"_components":[{"__id__":10}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"92lNGUDJhFXpAp6SLV4zvU","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":-1},"_lrot":{"__type__":"cc.Quat","x":0.7071067811865475,"w":0.7071067811865476},"_euler":{"__type__":"cc.Vec3","x":90}},{"__type__":"cc.Node","_name":"circle","_parent":{"__id__":1},"_components":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"22sVZC6HdB2qyNpKRWDK/q","_synced":{"default":false,"serializable":false}}},{"__type__":"cc.ParticleSystemComponent","node":{"__id__":2},"_materials":[{"__uuid__":"eadHiwQI1AUrcD8NI1Xglf"}],"startColor":{"__type__":"cc.GradientRange","color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":117},"gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"startSizeX":{"__id__":4},"startSize":{"__id__":4},"startSizeY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startSizeZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":3},"startRotationX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startRotationY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startRotationZ":{"__id__":5},"startRotation":{"__id__":5},"startDelay":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startLifetime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":0.5},"duration":1,"loop":false,"gravityModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"rateOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":20},"rateOverDistance":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"colorOverLifetimeModule":{"__type__":"cc.ColorOvertimeModule","enable":true,"color":{"__type__":"cc.GradientRange","color":{"__type__":"cc.Color","g":255,"b":133},"colorMin":{"__type__":"cc.Color","r":255,"g":194},"colorMax":{"__type__":"cc.Color","r":255,"b":245},"gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"},"_mode":2}},"shapeModule":{"__type__":"cc.ShapeModule","emitFrom":0,"radius":0.5,"arcSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1},"length":2,"_angle":0.008726646259971648},"sizeOvertimeModule":{"__type__":"cc.SizeOvertimeModule","size":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"velocityOvertimeModule":{"__type__":"cc.VelocityOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"speedModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1}},"forceOvertimeModule":{"__type__":"cc.ForceOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"limitVelocityOvertimeModule":{"__type__":"cc.LimitVelocityOvertimeModule","limitX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limitY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limitZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limit":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"rotationOvertimeModule":{"__type__":"cc.RotationOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"textureAnimationModule":{"__type__":"cc.TextureAnimationModule","frameOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startFrame":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"trailModule":{"__type__":"cc.TrailModule","lifeTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1},"widthRatio":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"colorOverTrail":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"colorOvertime":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"_particleSystem":{"__id__":3}},"renderer":{"__type__":"cc.ParticleSystemRenderer","_particleSystem":{"__id__":3}},"_capacity":20},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":0.5},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},{"__type__":"cc.Node","_name":"ring","_parent":{"__id__":1},"_components":[{"__id__":7}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"46TUfrqUhHYr7gFKZVD6zI","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","z":-1}},{"__type__":"cc.ParticleSystemComponent","node":{"__id__":6},"_materials":[{"__uuid__":"82/KcsSnxK8qq8ZEwDW+CM"}],"startColor":{"__type__":"cc.GradientRange","color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":134},"gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"startSizeX":{"__id__":8},"startSize":{"__id__":8},"startSizeY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startSizeZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startRotationX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startRotationY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startRotationZ":{"__id__":9},"startRotation":{"__id__":9},"startDelay":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startLifetime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1.2},"duration":1,"loop":false,"gravityModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"rateOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":5},"rateOverDistance":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"colorOverLifetimeModule":{"__type__":"cc.ColorOvertimeModule","enable":true,"color":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient","colorKeys":[{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","r":255,"a":1}},{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","r":255,"g":245,"a":1},"time":0.7879464285714286}],"alphaKeys":[{"__type__":"cc.AlphaKey"},{"__type__":"cc.AlphaKey","alpha":255,"time":0.13392857142857142},{"__type__":"cc.AlphaKey","alpha":0,"time":1}]},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"},"_mode":1}},"shapeModule":{"__type__":"cc.ShapeModule","emitFrom":2,"radius":0,"arcSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1},"length":1},"sizeOvertimeModule":{"__type__":"cc.SizeOvertimeModule","enable":true,"size":{"__type__":"cc.CurveRange","mode":1,"curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":0.39,"inTangent":2,"outTangent":2},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"velocityOvertimeModule":{"__type__":"cc.VelocityOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"speedModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1}},"forceOvertimeModule":{"__type__":"cc.ForceOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":-3}},"limitVelocityOvertimeModule":{"__type__":"cc.LimitVelocityOvertimeModule","limitX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limitY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limitZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"limit":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"rotationOvertimeModule":{"__type__":"cc.RotationOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"textureAnimationModule":{"__type__":"cc.TextureAnimationModule","frameOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"startFrame":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}}},"trailModule":{"__type__":"cc.TrailModule","lifeTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":1},"widthRatio":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},"colorOverTrail":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"colorOvertime":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"_particleSystem":{"__id__":7}},"renderer":{"__type__":"cc.ParticleSystemRenderer","_renderMode":2,"_particleSystem":{"__id__":7}}},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"constant":3},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"time":0,"value":1,"inTangent":0,"outTangent":0},{"time":1,"value":1,"inTangent":0,"outTangent":0}]}},{"__type__":"cc.ParticleSystemComponent","_name":"New Particle<ParticleSystemComponent>","node":{"__id__":1},"_materials":[{"__uuid__":"88V6zLv4FPpLjGVdSOidRu"},null],"startColor":{"__type__":"cc.GradientRange","color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":245},"gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"startSizeX":{"__id__":11},"startSize":{"__id__":11},"startSizeY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"startSizeZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"startSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":4},"startRotationX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"startRotationY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"startRotationZ":{"__id__":12},"startRotation":{"__id__":12},"startDelay":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":0.2},"startLifetime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":0.5},"duration":1,"loop":false,"gravityModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"rateOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":50},"rateOverDistance":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"colorOverLifetimeModule":{"__type__":"cc.ColorOvertimeModule","enable":true,"color":{"__type__":"cc.GradientRange","colorMin":{"__type__":"cc.Color","r":255,"g":235},"colorMax":{"__type__":"cc.Color","r":255},"gradient":{"__type__":"cc.Gradient","colorKeys":[{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","r":255}},{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","r":214,"g":255},"time":0.26785714285714285},{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","g":245,"b":255},"time":0.5602678571428572},{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","g":255,"b":31},"time":0.828125},{"__type__":"cc.ColorKey","color":{"__type__":"cc.Color","r":255},"time":1}],"alphaKeys":[{"__type__":"cc.AlphaKey","alpha":0},{"__type__":"cc.AlphaKey","alpha":0},{"__type__":"cc.AlphaKey","alpha":255,"time":0.19419642857142858},{"__type__":"cc.AlphaKey","alpha":255,"time":0.7790178571428571},{"__type__":"cc.AlphaKey","alpha":0,"time":0.9888392857142857}]},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"},"_mode":1}},"shapeModule":{"__type__":"cc.ShapeModule","radius":0.5,"radiusThickness":0.5,"arcMode":1,"arcSpeed":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":3},"length":1,"_angle":0.08726646259971647},"sizeOvertimeModule":{"__type__":"cc.SizeOvertimeModule","enable":true,"size":{"__type__":"cc.CurveRange","mode":1,"curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":0.75},{"__type__":"cc.Keyframe","time":0.22,"value":1,"inTangent":-0.29,"outTangent":-0.29},{"__type__":"cc.Keyframe","time":0.47,"value":0.69,"inTangent":-0.93,"outTangent":-0.93},{"__type__":"cc.Keyframe","time":0.79,"value":0.98,"inTangent":-0.4,"outTangent":-0.4},{"__type__":"cc.Keyframe","time":1,"value":0.46}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":1},"x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}},"velocityOvertimeModule":{"__type__":"cc.VelocityOvertimeModule","enable":true,"x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"y":{"__type__":"cc.CurveRange","mode":1,"curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe"},{"__type__":"cc.Keyframe","time":1,"value":1,"inTangent":2,"outTangent":2}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"speedModifier":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":1}},"forceOvertimeModule":{"__type__":"cc.ForceOvertimeModule","x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}},"limitVelocityOvertimeModule":{"__type__":"cc.LimitVelocityOvertimeModule","limitX":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"limitY":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"limitZ":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"limit":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}},"rotationOvertimeModule":{"__type__":"cc.RotationOvertimeModule","enable":true,"_separateAxes":true,"x":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"y":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":10},"z":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}},"textureAnimationModule":{"__type__":"cc.TextureAnimationModule","frameOverTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}},"startFrame":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}},"trailModule":{"__type__":"cc.TrailModule","lifeTime":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":5},"existWithParticles":false,"widthFromParticle":false,"widthRatio":{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":100},"colorFromParticle":true,"colorOverTrail":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"colorOvertime":{"__type__":"cc.GradientRange","gradient":{"__type__":"cc.Gradient"},"gradientMin":{"__type__":"cc.Gradient"},"gradientMax":{"__type__":"cc.Gradient"}},"_space":1,"_particleSystem":{"__id__":10}},"renderer":{"__type__":"cc.ParticleSystemRenderer","_mesh":{"__uuid__":"12Y9dMgWdJKJGmTiZyQR9H@a804a"},"_particleSystem":{"__id__":10}},"_capacity":1000},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"constant":1},{"__type__":"cc.CurveRange","curve":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMin":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]},"curveMax":{"__type__":"cc.AnimationCurve","preWrapMode":2,"postWrapMode":2,"keyFrames":[{"__type__":"cc.Keyframe","value":1},{"__type__":"cc.Keyframe","time":1,"value":1}]}}],{"__type__":"cc.Material","_effectAsset":{"__uuid__":"d1NGQ2rJZCcbhjH0/erZWw"},"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainTexture":{"__uuid__":"379VvqxbZMyKZOAXr/LxlQ@6c48a"}}]},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"d1NGQ2rJZCcbhjH0/erZWw"},"_techIdx":"0","_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainTexture":{"__uuid__":"bewSJCbDhGIoBbhO9DtqQ7@6c48a"}}]},{"__type__":"cc.EffectAsset","_name":"builtin-particle","techniques":[{"name":"add","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"value":[1,1,0,0],"type":16},"tintColor":{"value":[0.5,0.5,0.5,0.5],"type":16}}}]},{"name":"alpha-blend","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"value":[1,1,0,0],"type":16},"tintColor":{"value":[0.5,0.5,0.5,0.5],"type":16}}}]},{"name":"add-multiply","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"value":[1,1,0,0],"type":16},"tintColor":{"value":[0.5,0.5,0.5,0.5],"type":16}}}]},{"name":"add-smooth","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"value":[1,1,0,0],"type":16}}}]},{"name":"premultiply-blend","passes":[{"rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"value":[1,1,0,0],"type":16}}}]}],"shaders":[{"hash":522881683,"glsl3":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n};\n\nout vec2 uv;\nout vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nin vec2 uv;\nin vec4 color;\n\nuniform sampler2D mainTexture;\nuniform FragConstants {\n  vec4 tintColor;\n};\n\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\n\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }\n"},"glsl1":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform vec4 cc_exposure;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nvarying vec2 uv;\nvarying vec4 color;\n\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\n\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\n\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\n\nvoid main() { gl_FragColor = add(); }\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_BILLBOARD","type":"boolean"},{"name":"CC_USE_STRETCHED_BILLBOARD","type":"boolean"},{"name":"CC_USE_HORIZONTAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_VERTICAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_MESH","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"Constants","members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[],"binding":0},{"name":"FragConstants","members":[{"name":"tintColor","type":16,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":[],"binding":30}],"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add"},{"hash":1830161070,"glsl3":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n};\n\nout vec2 uv;\nout vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nin vec2 uv;\nin vec4 color;\n\nuniform sampler2D mainTexture;\nuniform FragConstants {\n  vec4 tintColor;\n};\n\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\n\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }\n"},"glsl1":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform vec4 cc_exposure;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nvarying vec2 uv;\nvarying vec4 color;\n\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\n\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\n\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\n\nvoid main() { gl_FragColor = multiply(); }\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_BILLBOARD","type":"boolean"},{"name":"CC_USE_STRETCHED_BILLBOARD","type":"boolean"},{"name":"CC_USE_HORIZONTAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_VERTICAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_MESH","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"Constants","members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[],"binding":0},{"name":"FragConstants","members":[{"name":"tintColor","type":16,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":[],"binding":30}],"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply"},{"hash":4017285573,"glsl3":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n};\n\nout vec2 uv;\nout vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nin vec2 uv;\nin vec4 color;\n\nuniform sampler2D mainTexture;\n\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\n\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }\n"},"glsl1":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform vec4 cc_exposure;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nvarying vec2 uv;\nvarying vec4 color;\n\nuniform sampler2D mainTexture;\n\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\n\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\n\nvoid main() { gl_FragColor = addSmooth(); }\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_BILLBOARD","type":"boolean"},{"name":"CC_USE_STRETCHED_BILLBOARD","type":"boolean"},{"name":"CC_USE_HORIZONTAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_VERTICAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_MESH","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"Constants","members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":[],"binding":30}],"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth"},{"hash":1226128191,"glsl3":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n};\n\nout vec2 uv;\nout vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n  vec4 cc_screenSize;\n  vec4 cc_screenScale;\n  vec4 cc_nativeSize;\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_exposure;\n  vec4 cc_mainLitDir;\n  vec4 cc_mainLitColor;\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nin vec2 uv;\nin vec4 color;\n\nuniform sampler2D mainTexture;\n\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\n\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }\n"},"glsl1":{"vert":"\nprecision highp float;\n\nvec4 quaternionFromAxisAngle(float angle, vec3 axis){\n    angle /= 2.;\n    float s = sin(angle);\n    vec4 res;\n    res.xyz = s * axis;\n    res.w = cos(angle);\n    return res;\n}\n\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n\n    return quat;\n}\n\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n\n    vec4 quat = vec4(0);\n\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n\n    return quat;\n}\n\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\n\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\n\nvoid scaleMatrix(inout mat4 m, float s){\n    m[0].xyz *= s;\n    m[1].xyz *= s;\n    m[2].xyz *= s;\n}\n\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\n\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\n\nvec3 rotateVecFromAxis(vec3 v, vec3 axis, float theta){\n    return cos(theta) * v + sin(theta) * cross(v, axis) + (1. - cos(theta)) * dot(v, axis) * axis;\n}\n\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\n\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\n\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n\nvarying vec2 uv;\nvarying vec4 color;\n\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\n\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\n\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n\n    pos = cc_matViewProj * pos;\n\n    return pos;\n}\n\nvoid main() { gl_Position = lpvs_main(); }\n","frag":"\nprecision highp float;\nuniform vec4 cc_exposure;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n}\n\nvec4 CCFragOutput(vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n\t#endif\n\treturn color;\n}\n\nvarying vec2 uv;\nvarying vec4 color;\n\nuniform sampler2D mainTexture;\n\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\n\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\n\nvoid main() { gl_FragColor = premultiplied(); }\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_BILLBOARD","type":"boolean"},{"name":"CC_USE_STRETCHED_BILLBOARD","type":"boolean"},{"name":"CC_USE_HORIZONTAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_VERTICAL_BILLBOARD","type":"boolean"},{"name":"CC_USE_MESH","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"Constants","members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":[],"binding":30}],"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied"}]},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"d1NGQ2rJZCcbhjH0/erZWw"},"_defines":[{}],"_props":[{"mainTexture":{"__uuid__":"b5snqx50BDmLQHhI/CssiX@6c48a"}}]}]
